{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setImputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoType","ProTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"4NAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAGzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OAEI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAQ,IACzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOlB,SACG,uBACAO,KAAK,OACLC,MAAOT,EACPU,SApBmB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,aA0B/BZ,EAAYe,UAAY,CACpBd,cAAee,IAASC,KAAKC,Y,mCCnCpBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGoCC,UAAWH,GAH/C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAMEA,EAAKC,OANP,uBAMZC,EANY,EAMZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAZtB,kBAgBZM,GAhBY,4CAAH,sDCAPO,EAAc,SAAC,GAAmB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAChC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAKN,IACtB,4BAAKA,QCHJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECFwB,SAACA,GAC7B,MAA0BlB,mBAAS,CAC3ByB,KAAM,GACNa,SAAS,IAFjB,mBAAOC,EAAP,KAAcC,EAAd,KAyBA,OArBIC,qBAAU,WAENxB,EAAQC,GACPwB,MAAK,SAAAC,GAEFC,YAAW,WAGXJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAIf,UAGH,CAACpB,IAIDqB,EDxB4BM,CAAa3B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACE,6BAAMpB,IAEPoB,GAAW,wCAEV,qBAAKJ,UAAU,YAAf,SAEOH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEKA,GADAA,EAAIC,aEXhBiB,EAAe,WAEvB,MAAoC9C,mBAAS,CAAC,WAA9C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAQD,OACI,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBACE,6BAEIgD,EAAWpB,KAAM,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEAA,SAAWA,GADNA,YCrBxB8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1c70a5a6.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport ProTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories}) => {\n\n//La caja tiene que tener un tipo de estado, para sabe lo que un usuario esta escribiendo\n    const [inputValue, setImputValue] = useState('')   \n\n                            // (e) = evento\n    const handleInputChange = (e) => {\n        setImputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length >2){\n            setCategories(cats => [inputValue, ...cats,  ]);\n            setImputValue('');\n        }\n        \n    }\n\n    return (\n            \n        <form onSubmit={handleSubmit}> \n           <input\n           type=\"text\"\n           value={inputValue}\n           onChange={ handleInputChange }\n           /> \n        </form>\n           \n    )\n}\n\nAddCategory.protoType = {\n    setCategories: ProTypes.func.isRequired\n}","\n\n\nexport const getGifs = async( category ) => {\n\n    \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category)}&limit=10&api_key=ZGwME5Q4TCWOJRkCjRuBi4iGmPojlO8L`;\n    const resp = await fetch(url);\n    //Se tiene que desestructurar\n    const {data} = await resp.json();\n    \n    const gifs = data.map(img =>{\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    return gifs;\n    \n}","import React from 'react'\n\n\nexport const GifGridItem = ({title, url }) => {\n    return (\n        <div className=\"card\">\n            <img src={ url } alt={title} />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const {data:images, loading} = useFetchGifs(category);\n \n    return (\n        <>\n          <h3>{ category }</h3>\n        \n        {loading && <p>Loading</p>}\n        \n          <div className=\"card-grid\">\n             {\n                 images.map(img =>(\n                    <GifGridItem \n                    key={img.id}\n                    { ...img}\n                    />\n                ))\n    \n             }\n        \n        </div>\n        </>\n    )\n}\n\n\n","import { useEffect, useState } from \"react\"\nimport { getGifs }from '../helpers/getGifs'\n\n\nexport const useFetchGifs = (category) =>{\nconst [state, setstate] = useState({\n        data: [],\n        loading: true\n});\n    useEffect(() => {\n\n        getGifs(category)\n        .then(imgs => {\n\n            setTimeout(() => {\n\n            \n            setstate({\n                data: imgs,\n                loading: false\n\n            });\n\n        },3000 );\n        })\n\n    }, [category])\n\n\n\nreturn state; \n\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\n\n\n\nexport const GifExpertApp = () => {\n\n     const [categories, setCategories] = useState(['Marvel'])\n\n\n     //const handleAdd = () => {\n     //setCategories( ['Berserk', ...categories] );\n     //}\n     //<button onClick={ handleAdd }>Agregar</button>\n\n    return (\n        <>\n          <h2>GifExpertApp</h2>\n          <AddCategory setCategories= {setCategories}/>\n         \n          <hr />\n            <ol>\n            {\n                categories.map ( category => (\n                   <GifGrid\n                   key={category} \n                   category={ category }\n                   /> \n             ))\n            }\n        </ol>\n        </>\n\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}